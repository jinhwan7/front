{"ast":null,"code":"import { io } from \"socket.io-client\";\nexport const socket = io(\"http://localhost:3001\", {\n  transports: [\"websocket\"]\n});\nexport const initSocketConnection = () => {\n  if (socket) return socket.connect();\n};\nexport const sendSocketMessage = function (cmd) {\n  let body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  if (socket === null || socket.connected === false) {\n    initSocketConnection();\n  }\n  socket.emit(\"mesage\", {\n    cmd,\n    body\n  });\n};\nconst cbMap = new Map();\nexport const socketInforReceived = (cbType, cb) => {\n  cbMap.set(cbType, cb);\n};\nif (socket.hasListeners(\"message\")) {\n  socket.off(\"message\");\n}\nsocket.on(\"message\", ref => {\n  for (let [, cbValue] of cbMap) {\n    cbValue(null, ret);\n  }\n});\nexport const disconnectSocket = () => {\n  if (socket === null || socket.connected === false) {\n    return;\n  }\n  socket.disconnect();\n  socket = undefined;\n};","map":{"version":3,"names":["io","socket","transports","initSocketConnection","connect","sendSocketMessage","cmd","body","connected","emit","cbMap","Map","socketInforReceived","cbType","cb","set","hasListeners","off","on","ref","cbValue","ret","disconnectSocket","disconnect","undefined"],"sources":["/Users/daniel/Documents/GitHub/miniproject/front/src/Components/SocketComponent.js"],"sourcesContent":["import { io } from \"socket.io-client\";\n\nexport const socket = io(\"http://localhost:3001\", {\n  transports: [\"websocket\"],\n});\nexport const initSocketConnection = () => {\n  if (socket) return socket.connect();\n};\n\nexport const sendSocketMessage = (cmd, body = null) => {\n  if (socket === null || socket.connected === false) {\n    initSocketConnection();\n  }\n  socket.emit(\"mesage\", {\n    cmd,\n    body,\n  });\n};\n\nconst cbMap = new Map();\n\nexport const socketInforReceived = (cbType, cb) => {\n  cbMap.set(cbType, cb);\n};\n\nif (socket.hasListeners(\"message\")) {\n  socket.off(\"message\");\n}\n\nsocket.on(\"message\", (ref) => {\n  for (let [, cbValue] of cbMap) {\n    cbValue(null, ret);\n  }\n});\n\nexport const disconnectSocket = () => {\n  if (socket === null || socket.connected === false) {\n    return;\n  }\n  socket.disconnect();\n  socket = undefined;\n};\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,kBAAkB;AAErC,OAAO,MAAMC,MAAM,GAAGD,EAAE,CAAC,uBAAuB,EAAE;EAChDE,UAAU,EAAE,CAAC,WAAW;AAC1B,CAAC,CAAC;AACF,OAAO,MAAMC,oBAAoB,GAAG,MAAM;EACxC,IAAIF,MAAM,EAAE,OAAOA,MAAM,CAACG,OAAO,EAAE;AACrC,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAG,UAACC,GAAG,EAAkB;EAAA,IAAhBC,IAAI,uEAAG,IAAI;EAChD,IAAIN,MAAM,KAAK,IAAI,IAAIA,MAAM,CAACO,SAAS,KAAK,KAAK,EAAE;IACjDL,oBAAoB,EAAE;EACxB;EACAF,MAAM,CAACQ,IAAI,CAAC,QAAQ,EAAE;IACpBH,GAAG;IACHC;EACF,CAAC,CAAC;AACJ,CAAC;AAED,MAAMG,KAAK,GAAG,IAAIC,GAAG,EAAE;AAEvB,OAAO,MAAMC,mBAAmB,GAAG,CAACC,MAAM,EAAEC,EAAE,KAAK;EACjDJ,KAAK,CAACK,GAAG,CAACF,MAAM,EAAEC,EAAE,CAAC;AACvB,CAAC;AAED,IAAIb,MAAM,CAACe,YAAY,CAAC,SAAS,CAAC,EAAE;EAClCf,MAAM,CAACgB,GAAG,CAAC,SAAS,CAAC;AACvB;AAEAhB,MAAM,CAACiB,EAAE,CAAC,SAAS,EAAGC,GAAG,IAAK;EAC5B,KAAK,IAAI,GAAGC,OAAO,CAAC,IAAIV,KAAK,EAAE;IAC7BU,OAAO,CAAC,IAAI,EAAEC,GAAG,CAAC;EACpB;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,gBAAgB,GAAG,MAAM;EACpC,IAAIrB,MAAM,KAAK,IAAI,IAAIA,MAAM,CAACO,SAAS,KAAK,KAAK,EAAE;IACjD;EACF;EACAP,MAAM,CAACsB,UAAU,EAAE;EACnBtB,MAAM,GAAGuB,SAAS;AACpB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}