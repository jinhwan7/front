{"ast":null,"code":"import Crypto from \"crypto-js\";\nclass ChatEvents {\n  constructor(socket, cryptoKey) {\n    this.socket = socket;\n    this.cryptoKey = cryptoKey || '';\n  }\n  handleConnect(cb) {\n    this.socket.on('connect', () => {\n      if (this.socket.connected) {\n        cb();\n      }\n    });\n  }\n  handleDisConnect(cb) {\n    this.socket.on('disconnect', () => {\n      cb();\n    });\n  }\n  handleError(cb) {\n    this.socket.on('connect_error', () => {\n      cb();\n    });\n  }\n  getRooms(handleRooms) {\n    this.socket.once('rooms', data => {\n      handleRooms(data);\n    });\n    this.socket.emit('rooms');\n  }\n  joinRoom(room) {\n    this.socket.emit('join', {\n      socketIdx: this.socket.id,\n      room: room\n    });\n  }\n  leaveRoom(room) {\n    this.socket.emit('leave', {\n      socketIdx: this.socket.id,\n      room: room\n    });\n  }\n  sendMessage(message, room) {\n    this.emit('send', {\n      socketIdx: this.socket.id,\n      message: message,\n      room: room\n    });\n  }\n  sendImage(image, room, imgSize) {\n    if (image.type.split('/')[0] === 'image' && image.size <= imgSize) {\n      this.socket.emit('sendImage', {\n        socketIdx: this.socket.id,\n        message: image,\n        room: room\n      });\n      return true;\n    } else {\n      return false;\n    }\n  }\n  receiveMessages(handleMessage) {\n    this.socket.on('receiveImage', data => {\n      const reader = new FileReader();\n      reader.onload = e => {\n        handleMessage({\n          idx: data.idx,\n          message: `@$IMG ${e.target?.result}`\n        });\n      };\n      reader.readAsDataURL(new Blob([data.message], {\n        type: 'images/png'\n      }));\n    });\n    this.on('receive', data => {\n      if (this.socket.connected) {\n        handleMessage(data);\n      }\n    });\n    this.socket.on('joinRoom', id => {\n      if (this.socket.connected) {\n        handleMessage({\n          idx: '#system',\n          message: `${id} 님이 대화에 참여 하였습니다.`\n        });\n        this.getHeadCount();\n      }\n    });\n    this.socket.on('leaveRoom', id => {\n      if (this.socket.connected) {\n        handleMessage({\n          idx: '#system',\n          message: `${id} 님이 대화에서 나갔습니다.`\n        });\n        this.getHeadCount();\n      }\n    });\n  }\n  getHeadCount() {\n    this.socket.emit('headCount');\n  }\n  receiveHeadCount(room, handleCount) {\n    this.socket.on('headCount', data => {\n      if (this.socket.connected) {\n        handleCount(data[room]);\n      }\n    });\n  }\n  receiveRoomHeadCount(handleCount) {\n    this.socket.on('headCount', data => {\n      if (this.socket.connected) {\n        handleCount(data);\n      }\n    });\n  }\n  emit(eventName, message) {\n    this.socket.emit(eventName, this.cryptoKey.length > 0 ? Crypto.AES.encrypt(JSON.stringify(message), this.cryptoKey).toString() : message);\n  }\n  on(eventName, cb) {\n    this.socket.on(eventName, this.cryptoKey.length > 0 ? data => cb(JSON.parse(Crypto.AES.decrypt(data, this.cryptoKey).toString(Crypto.enc.Utf8))) : cb);\n  }\n}\nexport default ChatEvents;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}